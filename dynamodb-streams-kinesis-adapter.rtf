{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 Arial-BoldItalicMT;
\f3\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;\red17\green85\blue204;\red55\green71\blue79;\red197\green34\blue31;
\red184\green6\blue114;\red25\green103\blue210;\red24\green128\blue56;\red147\green52\blue230;}
{\*\expandedcolortbl;;\csgenericrgb\c6667\c33333\c80000;\csgenericrgb\c21569\c27843\c30980;\csgenericrgb\c77255\c13333\c12157;
\csgenericrgb\c72157\c2353\c44706;\csgenericrgb\c9804\c40392\c82353;\csgenericrgb\c9412\c50196\c21961;\csgenericrgb\c57647\c20392\c90196;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww30940\viewh23260\viewkind1
\deftab720
\pard\pardeftab720\ri0\sl276\slmult1\sa60\partightenfactor0

\f0\fs52 \cf0 DynamoDBStreams Kinesis Adapter V1->V2 Migration Notes\
\pard\pardeftab720\ri0\sl276\slmult1\sa320\partightenfactor0

\fs30 \cf0 Andrew Muldowney - andrew.muldowney87@gmail.com\cf2 \
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0

\fs22 \cf2 I tried my hand at converting the dynamodb-streams-kinesis-adapter from V1 to V2, AWS-SDK and Kinesis Client.\cf0 \
\
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/amuldowney/dynamodb-streams-kinesis-adapter"}}{\fldrslt \cf2 \ul \ulc2 https://github.com/amuldowney/dynamodb-streams-kinesis-adapter}}\cf2  \cf0 \
\
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0

\f1 \cf0 \uc0\u60419 
\fs18  \cf3 <properties>\cf0 \
        \cf3 <aws-java-sdkv2.version>\cf4 2\cf3 .\cf4 17\cf3 .\cf4 242\cf3 </aws-java-sdkv2.version>\cf0 \
        \cf3 <software-kinesis.version>\cf4 2\cf3 .\cf4 5\cf3 .\cf4 4\cf3 </software-kinesis.version>\cf0 \
        \cf3 <aws.dynamodblocal.version>[\cf4 1\cf3 .\cf4 12\cf3 ,\cf4 2\cf3 .\cf4 0\cf3 )</aws.dynamodblocal.version>\cf0 \
    \cf3 </properties>\cf0 \
\

\fs22 \uc0\u60418 
\f0 \
I was able to get all (existing) tests to pass which includes an integration test that writes some rows and reads them out of the stream. But during the process I had to either implement a 
\f1 \cf3 @KinesisClientInternalApi
\f0 \cf0  or had to slow down the library in some way. I\'92ve noted the major ones here in this document. I hope this is helpful for others looking to do the same work and/or get some advice on ways to avoid implementing 
\f1 \cf3 @KinesisClientInternalApi
\f0 \cf0  classes.\
\
\
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0

\f2\i\b \cf0 StreamsWorkerFactory.java\
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0

\f0\i0\b0 \cf0 \
\pard\tx360\tx1080\pardeftab720\li1080\fi-360\ri0\sl276\slmult1\partightenfactor0
\ls1\ilvl0\cf0 1.	
\f1 \cf3 ConfigsBuilder
\f0 \cf0  doesn\'92t take the 
\f1 \cf3 KinesisClientLibConfiguration
\f0 \cf0  so we have to extract the specific configurations to override their settings. \
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls1\ilvl0\cf0 \
\ls1\ilvl0
\f1 \uc0\u60419 
\fs18     \cf3 StreamsWorkerFactory.java\
\uc0\u8232     LeaseManagementConfig\cf0  \cf3 lmc\cf0  \cf3 =\cf0  \cf3 configsBuilder.leaseManagementConfig();\cf0 \
    \cf3 lmc\cf0  \cf3 =\cf0  \cf3 lmc.initialLeaseTableReadCapacity(config.getInitialLeaseTableReadCapacity());\cf0 \
    \cf3 lmc\cf0  \cf3 =\cf0  \cf3 lmc.initialLeaseTableWriteCapacity(config.getInitialLeaseTableWriteCapacity());\cf0 \
    \cf3 lmc\cf0  \cf3 =\cf0  \cf3 lmc.shardSyncIntervalMillis(config.getShardSyncIntervalMillis());\cf0 \
\ls1\ilvl0
\fs22 \uc0\u60418 
\f0 \
\pard\tx360\tx1080\pardeftab720\li1080\fi-360\ri0\sl276\slmult1\partightenfactor0
\ls1\ilvl0\cf0 2.	
\f1 \cf3 DynamoDBLeaseManagementFactory
\f0 \cf0  is an 
\f1 \cf3 @KinesisClientInternalApi
\f0 \cf0  but we need to override it to set our own DynamoDBStreamsShardSyncer because there is nowhere else we can do it. Creating a 
\f1 \cf3 DynamoDBLeaseManagementFactory
\f0 \cf0  is a metric ton of constructor args. There is a place to set a hierarchicalShardSyncer on the 
\f1 \cf3 LeaseManagementConfig
\f0 \cf0  but it doesn\'92t work.\uc0\u8232 \
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls1\ilvl0
\f1 \cf0 \uc0\u60419 
\fs18 \cf3 StreamsWorkerFactory.java\
\
LeaseManagementConfig\cf0  \cf3 lmc\cf0  \cf3 =\cf0  \cf3 configsBuilder.leaseManagementConfig();\cf0 \
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls1\ilvl0\cf3 lmc\cf0  \cf3 =\cf0  \cf3 lmc.hierarchicalShardSyncer(shardSyncer);\cf5 //DOESNT WORK\
\
//Instead we must do the following\
\ls1\ilvl0\cf3  DynamoDBStreamsLeaseManagementFactory dynamoDBStreamsLeaseManagementFactory =\
        \cf6 new\cf3  DynamoDBStreamsLeaseManagementFactory(\
            streamsClient,\
            dynamoDBClient,\
          	...\
            \cf6 new\cf3  DynamoDBStreamsShardSyncer(\cf6 new\cf3  StreamsLeaseCleanupValidator()),\
          	...\
            configsBuilder.retrievalConfig().streamTracker().isMultiStream() ?\
                \cf6 new\cf3  DynamoDBMultiStreamLeaseSerializer() :\
                \cf6 new\cf3  DynamoDBLeaseSerializer(),\
           	...);\
    lmc.leaseManagementFactory(dynamoDBStreamsLeaseManagementFactory);\
HierarchicalShardSyncer\
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls1\ilvl0
\fs22 \cf0 \uc0\u60418 
\f0 \uc0\u8232 \
\pard\tx360\tx1080\pardeftab720\li1080\fi-360\ri0\sl276\slmult1\partightenfactor0
\ls1\ilvl0\cf0 3.	
\f1 \cf3 HierarchicalShardSyncer
\f0 \cf0  is an 
\f1 \cf3 @KinesisClientInternalApi
\f0 \cf0  but we need to override it as well to support some specific DDB needs.\
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls1\ilvl0
\f1 \cf0 \uc0\u60419 
\fs18 \cf6 class\cf3  DynamoDBStreamsShardSyncer \cf6 extends\cf3  HierarchicalShardSyncer...\uc0\u8232 \cf0 \uc0\u8232  \cf3 *\cf0  \cf3 This\cf0  \cf6 class\cf0  \cf3 has\cf0  \cf3 been\cf0  \cf3 copied\cf0  \cf3 from\cf0  \cf3 ShardSyncer\cf0  \cf3 in\cf0  \cf3 KinesisClientLibrary\cf0  \cf3 and\cf0  \cf3 edited\cf0  \cf3 slightly\cf0  \cf3 to\cf0  \cf3 enable\cf0  \cf3 DynamoDB\cf0  \cf3 Streams\cf0 \
 \cf3 *\cf0  \cf3 specific\cf0  \cf3 behavior.\cf0  \cf3 It\cf0  \cf3 is\cf0  \cf3 a\cf0  \cf3 helper\cf0  \cf6 class\cf0  \cf3 to\cf0  \cf3 sync\cf0  \cf3 leases\cf0  \cf3 with\cf0  \cf3 shards\cf0  \cf3 of\cf0  \cf3 the\cf0  \cf3 DynamoDB\cf0  \cf3 Stream.\cf0 \
 \cf3 *\cf0  \cf3 It\cf0  \cf3 will\cf0  \cf3 create\cf0  \cf6 new\cf0  \cf3 leases/activities\cf0  \cf3 when\cf0  \cf3 it\cf0  \cf3 discovers\cf0  \cf6 new\cf0  \cf3 DynamoDB\cf0  \cf3 Streams\cf0  \cf3 shards\cf0  \cf3 (bootstrap/resharding).\cf0 \
 \cf3 *\cf0  \cf3 It\cf0  \cf3 deletes\cf0  \cf3 leases\cf0  \cf6 for\cf0  \cf3 shards\cf0  \cf3 that\cf0  \cf3 have\cf0  \cf3 been\cf0  \cf3 trimmed\cf0  \cf3 from\cf0  \cf3 DynamoDB\cf0  \cf3 Stream.\cf0 \
 \cf3 *\cf0  \cf3 It\cf0  \cf3 also\cf0  \cf3 ensures\cf0  \cf3 that\cf0  \cf3 leases\cf0  \cf6 for\cf0  \cf3 shards\cf0  \cf3 that\cf0  \cf3 have\cf0  \cf3 been\cf0  \cf3 completely\cf0  \cf3 processed\cf0  \cf3 are\cf0  \cf3 not\cf0  \cf3 deleted\cf0  \cf3 until\cf0  \cf3 their\cf0  \cf3 children\cf0 \
 \cf3 *\cf0  \cf3 shards\cf0  \cf3 have\cf0  \cf3 also\cf0  \cf3 been\cf0  \cf3 completely\cf0  \cf3 processed.\uc0\u8232 \u8232 
\fs22 software.amazon.awssdk.services.kinesis.model.Record
\fs18 \cf0 \
\ls1\ilvl0
\fs22 \uc0\u60418 
\f0 \
\pard\tx360\tx1080\pardeftab720\li1080\fi-360\ri0\sl276\slmult1\partightenfactor0
\ls1\ilvl0\cf0 4.	Thank goodness 
\f1 \cf3 SynchronousPrefetchingRetrievalFactory 
\f0 \cf0 exists, the default 
\f1 \cf3 RetrievalFactories 
\f0 \cf0 rely on stream connections to Kinesis which I didn\'92t want to fake.\
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls1\ilvl0\cf0 \
\ls1\ilvl0
\f1 \uc0\u60419 
\fs18  \cf3 RetrievalConfig\cf0  \cf3 rc\cf0  \cf3 =\cf0  \cf3 configsBuilder.retrievalConfig();\cf0 \
    \cf3 rc\cf0  \cf3 =\cf0  \cf3 rc.retrievalFactory(\cf6 new\cf0  \cf3 SynchronousPrefetchingRetrievalFactory(\cf0 \
        \cf3 rc.streamTracker().streamConfigList().get(\cf4 0\cf3 ).streamIdentifier().streamName(),\uc0\u8232 	\cf5 //always a single stream tracker for dynamodb streams\
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls1\ilvl0\cf0         \cf3 streamsClient,\cf0 \
        \cf6 new\cf0  \cf3 DynamoDBStreamsRecordsFetcherFactory(),\cf0 \
        \cf4 1000\cf3 ,\cf0 \
        \cf3 executorService,\cf0 \
        \cf4 300\cf3 ,\cf0 \
        \cf3 Duration.ofSeconds(\cf4 30\cf3 )\cf0 \
    \cf3 ));\cf0 \
\
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls1\ilvl0
\fs22 \cf0 \uc0\u60418 
\f0 \
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls1\ilvl0
\f2\i\b \cf0 \
Model package\
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls1\ilvl0
\f0\i0\b0 \cf0 \
\pard\tx360\tx1080\pardeftab720\li1080\fi-360\ri0\sl276\slmult1\partightenfactor0
\ls2\ilvl0\cf0 1.	All the model work is now static instantiation / mapping since V2 data classes are final w/ builder. This is maybe a little slower than before. I\'92ve renamed all the classes *Mapper to indicate they aren\'92t adapting but creating new objects.\
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls2\ilvl0\cf0 \
\pard\tx360\tx1080\pardeftab720\li1080\fi-360\ri0\sl276\slmult1\partightenfactor0
\ls2\ilvl0\cf0 2.	
\f1 \cf3 AmazonServiceExceptionTransformer
\f0 \cf0  work is extensive, mapping the new types along with going from editable to builders all over\
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls2\ilvl0\cf0 \
\pard\tx360\tx1080\pardeftab720\li1080\fi-360\ri0\sl276\slmult1\partightenfactor0
\ls2\ilvl0\cf0 3.	
\f1 \cf3 RecordObjectMapper
\f0 \cf0  & 
\f1 \cf3 RecordMapper have
\f0 \cf0  changed dramatically. Since we can\'92t sub-class 
\f1 \cf3 software.amazon.awssdk.services.kinesis.model.Record
\f0 \cf0  ( its final now) we have to actually store the DDB record in the Kinesis record bytes and pull it out on the other end.\uc0\u8232 \
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls2\ilvl0
\f1 \cf0 \uc0\u60419 
\fs18      \cf3 dynamoRecord\cf0  \cf3 =\cf0  \cf3 Record.builder()\cf0 \
        \cf3 .awsRegion(\cf7 "us-east-1"\cf3 )\cf0 \
        \cf3 .eventID(UUID.randomUUID().\cf0 toString\cf3 ())\cf0 \
        \cf3 .eventSource(\cf7 "aws:dynamodb"\cf3 )\cf0 \
        \cf3 .eventVersion(\cf7 "1.1"\cf3 )\cf0 \
        \cf3 .eventName(OperationType.MODIFY)\cf0 \
        \cf3 .dynamodb(StreamRecord.builder()\cf0 \
            \cf3 .approximateCreationDateTime(TEST_DATE)\cf0 \
            \cf3 .keys(key)\cf0 \
            \cf3 .oldImage(\cf6 new\cf0  \cf3 HashMap<>(key))\cf0 \
            \cf3 .newImage(newImage)\cf0 \
            \cf3 .sizeBytes(\cf8 Long\cf3 .MAX_VALUE)\cf0 \
            \cf3 .sequenceNumber(TEST_STRING)\cf0 \
            \cf3 .streamViewType(StreamViewType.NEW_AND_OLD_IMAGES)\cf0 \
            \cf3 .build()).build();\cf0 \
\
        \cf3 kinesisRecord\cf0  \cf3 =\cf0  \cf3 RecordMapper.convert(dynamoRecord);\cf0 \
\uc0\u8232 \u8232     \cf3 @Test\cf0 \
    \cf6 public\cf0  \cf6 void\cf0  \cf3 testGetDataDeserialized()\cf0  \cf6 throws\cf0   \cf3 IOException\cf0  \cf3 \{\cf0 \
        \cf3 Whitebox.setInternalState(RecordMapper.\cf6 class\cf3 ,\cf0  \cf3 ObjectMapper.\cf6 class\cf3 ,\cf0  \cf3 MAPPER);\cf0 \
\
        \cf3 java.nio.ByteBuffer\cf0  \cf3 dynamoRecordAsData\cf0  \cf3 =\cf0  \cf3 kinesisRecord.data().asByteBuffer();\cf0 \
        \cf3 Record\cf0  \cf3 actual\cf0  \cf3 =\cf0  \cf3 MAPPER.readValue(BinaryUtils.copyBytesFrom(dynamoRecordAsData),\cf0  \cf3 Record.serializableBuilderClass()).build();\cf0 \
        \cf3 assertEquals(dynamoRecord,\cf0  \cf3 actual);\cf0 \
    \cf3 \}\cf0 \
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls2\ilvl0\cf0 \uc0\u60418 
\f0\fs22 \
\
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls2\ilvl0
\f2\i\b \cf0 ShardMapper\
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls2\ilvl0
\f0\i0\b0 \cf0 \
\pard\tx360\tx1080\pardeftab720\li1080\fi-360\ri0\sl276\slmult1\partightenfactor0
\ls3\ilvl0\cf0 1.	In ShardMapper we lie about the HashKeyRange to keep a different part of the code off our backs, parts of the KCL want to piece together hash keys which creates a loop that breaks the adapter.\
\pard\pardeftab720\li720\ri0\sl276\slmult1\partightenfactor0
\ls3\ilvl0\cf0 \
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls3\ilvl0\cf0 \
\ls3\ilvl0
\f1 \uc0\u60419 
\fs18 \cf6 public\cf0  \cf6 class\cf0  \cf3 ShardMapper\cf0  \cf3 \{\cf0 \
\
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls3\ilvl0
\f3\b \cf0     \cf6 static\cf0  \cf6 final\cf0  \cf3 BigInteger\cf0  \cf3 MIN_HASH_KEY\cf0  \cf3 =\cf0  \cf3 BigInteger.ZERO;\cf0 \
    \cf6 static\cf0  \cf6 final\cf0  \cf3 BigInteger\cf0  \cf3 MAX_HASH_KEY\cf0  \cf3 =\cf0  \cf6 new\cf0  \cf3 BigInteger(\cf7 "2"\cf3 ).pow(\cf4 128\cf3 ).subtract(BigInteger.ONE);\cf0 \
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls3\ilvl0
\f1\b0 \cf0 \
    \cf6 public\cf0  \cf6 static\cf0  \cf3 software.amazon.awssdk.services.kinesis.model.Shard\cf0  \cf3 convert(software.amazon.awssdk.services.dynamodb.model.Shard\cf0  \cf3 internalShard)\cf0  \cf3 \{\cf0 \
        \cf6 return\cf0   \cf3 software.amazon.awssdk.services.kinesis.model.Shard.builder()\cf0 \
            \cf3 .shardId(internalShard.shardId())\cf0 \
            \cf3 .parentShardId(internalShard.parentShardId())\cf0 \
            \cf3 .adjacentParentShardId(null)\cf0 \
            \cf3 .hashKeyRange(software.amazon.awssdk.services.kinesis.model.HashKeyRange.builder()\cf0 \
             
\f3\b    \cf3 .startingHashKey(MIN_HASH_KEY.\cf0 toString\cf3 ())\cf0 \
                \cf3 .endingHashKey(MAX_HASH_KEY.\cf0 toString\cf3 ())\cf0 \
\ls3\ilvl0
\f1\b0                 \cf3 .build())\cf0 \
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls3\ilvl0\cf3 ...\cf0 \
\pard\pardeftab720\ri0\sl276\slmult1\partightenfactor0
\ls3\ilvl0
\fs22 \cf0 \uc0\u60418 
\f0 \
\
}